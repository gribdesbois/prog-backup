
.btn2 {
    &:hover {
        & + .progress {
            & > .progress__bar {
                transform: scaleX(1);
            }
        }
        ~ .boxes {
            & > .boxes--rotDegrees {
                transform: rotate(0deg);
            }
            & > .boxes--rotTurns {
                transform: rotate(0turn);
            }
        }
    }
}

.progress {
    &__bar {
        transform-origin: 0%;
        background-color: $cd-secondary;
        padding: 2rem;
        transform: scaleX(0);
        transition: transform 1000ms cubic-bezier(.32,0,.07,1);
    }
}

.boxes {
    &--rotDegrees {
        background: green;
        transform: rotate(360deg);
        transition: transform 500ms ease-in-out;
    }
    &--rotTurns {
        background: pink;
        transform: rotate(-1turn);
        transition: transform 500ms ease-in-out;
    }
}

.load {
    width: $size*10;
    height: $size*7.5;
    display: flex;
    justify-content: space-evenly;
    &__bar {
        background-color: #15DEA5;
        height: 100%;
        width: $size;
        animation: bars $anim-dur backwards infinite ease-in-out alternate;
        @for $i from 1 through $num-bars {
            &--#{$i} {
                animation-delay: $anim-delay * $i;
            }
            &--#{$i}-inv {
                animation-delay: $anim-delay * $i + random(100)*15ms;
                animation-direction: alternate-reverse;
                background-color: $cd-bars-inv;
                &:hover {
                    animation-play-state: paused;
                }
            }
        }
        
    }
    /*Each iteration through the loop will yield a new selector, with that iterationâ€™s index number used in its name, as well as to multiply the $anim-delay and create an incremented delay. $anim-delay is set to the duration of the animation divided by the number of bars.*/
}

.spin {
    background-color: #15DEA5;
    width: 30vh;
    height: 30vh;
    animation: spin 3s linear infinite paused;
    &:hover {
        animation-play-state: running;
    }
}
